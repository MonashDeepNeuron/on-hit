2025/02/23 21:24:33 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 469837389
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /home/labuser/anaconda3/envs/openmmlab
    NVCC: Cuda compilation tools, release 12.1, V12.1.66
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.1.1+cu121
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.9.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=8.9.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.1
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 469837389
    diff_rank_seed: False
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/02/23 21:24:33 - mmengine - INFO - Config:
ann_file = '/home/labuser/OnHit/OnHitCode/Mapping/zedtopkl/test_pkl_files/nathan_dataset.pkl'
auto_scale_lr = dict(base_batch_size=128, enable=False)
dataset_type = 'PoseDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, save_best='auto', type='CheckpointHook'),
    logger=dict(ignore_last=False, interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
model = dict(
    backbone=dict(
        gcn_adaptive='init',
        gcn_with_res=True,
        graph_cfg=dict(layout='nturgb+d', mode='spatial'),
        tcn_type='mstcn',
        type='STGCN'),
    cls_head=dict(in_channels=256, num_classes=60, type='GCNHead'),
    type='RecognizerGCN')
optim_wrapper = dict(
    optimizer=dict(
        lr=0.1, momentum=0.9, nesterov=True, type='SGD', weight_decay=0.0005))
param_scheduler = [
    dict(
        T_max=16,
        by_epoch=True,
        convert_to_iter_based=True,
        eta_min=0,
        type='CosineAnnealingLR'),
]
randomness = dict(deterministic=False, diff_rank_seed=False, seed=None)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file=
        '/home/labuser/OnHit/OnHitCode/Mapping/zedtopkl/test_pkl_files/nathan_dataset.pkl',
        pipeline=[
            dict(type='PreNormalize3D'),
            dict(dataset='nturgb+d', feats=[
                'b',
            ], type='GenSkeFeat'),
            dict(
                clip_len=100,
                num_clips=10,
                test_mode=True,
                type='UniformSampleFrames'),
            dict(type='PoseDecode'),
            dict(num_person=1, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        split='xsub_val',
        test_mode=True,
        type='PoseDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = [
    dict(type='AccMetric'),
]
test_pipeline = [
    dict(type='PreNormalize3D'),
    dict(dataset='nturgb+d', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(
        clip_len=100, num_clips=10, test_mode=True,
        type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
train_cfg = dict(
    max_epochs=100, type='EpochBasedTrainLoop', val_begin=1, val_interval=5)
train_dataloader = dict(
    batch_size=16,
    dataset=dict(
        dataset=dict(
            ann_file=
            '/home/labuser/OnHit/OnHitCode/Mapping/zedtopkl/test_pkl_files/nathan_dataset.pkl',
            pipeline=[
                dict(type='PreNormalize3D'),
                dict(dataset='nturgb+d', feats=[
                    'b',
                ], type='GenSkeFeat'),
                dict(clip_len=100, type='UniformSampleFrames'),
                dict(type='PoseDecode'),
                dict(num_person=1, type='FormatGCNInput'),
                dict(type='PackActionInputs'),
            ],
            split='xtrain',
            type='PoseDataset'),
        times=5,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='PreNormalize3D'),
    dict(dataset='nturgb+d', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(clip_len=100, type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file=
        '/home/labuser/OnHit/OnHitCode/Mapping/zedtopkl/test_pkl_files/nathan_dataset.pkl',
        pipeline=[
            dict(type='PreNormalize3D'),
            dict(dataset='nturgb+d', feats=[
                'b',
            ], type='GenSkeFeat'),
            dict(
                clip_len=100,
                num_clips=1,
                test_mode=True,
                type='UniformSampleFrames'),
            dict(type='PoseDecode'),
            dict(num_person=1, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        split='xsub_val',
        test_mode=True,
        type='PoseDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(type='AccMetric'),
]
val_pipeline = [
    dict(type='PreNormalize3D'),
    dict(dataset='nturgb+d', feats=[
        'b',
    ], type='GenSkeFeat'),
    dict(
        clip_len=100, num_clips=1, test_mode=True, type='UniformSampleFrames'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../../OnHitCode/models/test2'

2025/02/23 21:24:34 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/02/23 21:24:34 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/02/23 21:24:34 - mmengine - INFO - 159 videos remain after valid thresholding
2025/02/23 21:24:34 - mmengine - INFO - 19 videos remain after valid thresholding
Name of parameter - Initialization information

backbone.data_bn.weight - torch.Size([75]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.data_bn.bias - torch.Size([75]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.weight - torch.Size([192, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.0.weight - torch.Size([64, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.weight - torch.Size([384, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.0.weight - torch.Size([128, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.conv.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.conv.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.weight - torch.Size([768, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.conv.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.conv.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.A - torch.Size([3, 25, 25]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

cls_head.fc.weight - torch.Size([60, 256]): 
NormalInit: mean=0, std=0.01, bias=0 

cls_head.fc.bias - torch.Size([60]): 
NormalInit: mean=0, std=0.01, bias=0 
2025/02/23 21:24:34 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/02/23 21:24:34 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/02/23 21:24:34 - mmengine - INFO - Checkpoints will be saved to /home/labuser/OnHit/OnHitCode/models/test2.
2025/02/23 21:24:38 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:24:38 - mmengine - INFO - Epoch(train)   [1][50/50]  lr: 9.9077e-02  eta: 0:06:50  time: 0.0727  data_time: 0.0041  memory: 1457  loss: 2.7411  top1_acc: 0.0909  top5_acc: 0.5455  loss_cls: 2.7411
2025/02/23 21:24:38 - mmengine - INFO - Saving checkpoint at 1 epochs
2025/02/23 21:24:42 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:24:42 - mmengine - INFO - Epoch(train)   [2][50/50]  lr: 9.6269e-02  eta: 0:06:14  time: 0.0679  data_time: 0.0040  memory: 1457  loss: 2.5939  top1_acc: 0.0000  top5_acc: 0.4545  loss_cls: 2.5939
2025/02/23 21:24:42 - mmengine - INFO - Saving checkpoint at 2 epochs
2025/02/23 21:24:46 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:24:46 - mmengine - INFO - Epoch(train)   [3][50/50]  lr: 9.1682e-02  eta: 0:06:00  time: 0.0678  data_time: 0.0039  memory: 1457  loss: 2.3502  top1_acc: 0.4545  top5_acc: 0.7273  loss_cls: 2.3502
2025/02/23 21:24:46 - mmengine - INFO - Saving checkpoint at 3 epochs
2025/02/23 21:24:49 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:24:49 - mmengine - INFO - Epoch(train)   [4][50/50]  lr: 8.5494e-02  eta: 0:05:53  time: 0.0679  data_time: 0.0044  memory: 1457  loss: 2.2371  top1_acc: 0.0000  top5_acc: 0.9091  loss_cls: 2.2371
2025/02/23 21:24:49 - mmengine - INFO - Saving checkpoint at 4 epochs
2025/02/23 21:24:53 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:24:53 - mmengine - INFO - Epoch(train)   [5][50/50]  lr: 7.7942e-02  eta: 0:05:46  time: 0.0683  data_time: 0.0047  memory: 1457  loss: 1.9873  top1_acc: 0.3636  top5_acc: 0.9091  loss_cls: 1.9873
2025/02/23 21:24:53 - mmengine - INFO - Saving checkpoint at 5 epochs
2025/02/23 21:24:53 - mmengine - INFO - Epoch(val) [5][2/2]    acc/top1: 0.2105  acc/top5: 0.6842  acc/mean1: 0.2083  data_time: 0.0453  time: 0.0895
2025/02/23 21:24:53 - mmengine - INFO - The best checkpoint with 0.2105 acc/top1 at 5 epoch is saved to best_acc_top1_epoch_5.pth.
2025/02/23 21:24:57 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:24:57 - mmengine - INFO - Epoch(train)   [6][50/50]  lr: 6.9315e-02  eta: 0:05:40  time: 0.0675  data_time: 0.0039  memory: 1457  loss: 1.8069  top1_acc: 0.6364  top5_acc: 0.9091  loss_cls: 1.8069
2025/02/23 21:24:57 - mmengine - INFO - Saving checkpoint at 6 epochs
2025/02/23 21:25:01 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:01 - mmengine - INFO - Epoch(train)   [7][50/50]  lr: 5.9947e-02  eta: 0:05:34  time: 0.0677  data_time: 0.0039  memory: 1457  loss: 1.5971  top1_acc: 0.5455  top5_acc: 0.9091  loss_cls: 1.5971
2025/02/23 21:25:01 - mmengine - INFO - Saving checkpoint at 7 epochs
2025/02/23 21:25:04 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:04 - mmengine - INFO - Epoch(train)   [8][50/50]  lr: 5.0196e-02  eta: 0:05:30  time: 0.0680  data_time: 0.0040  memory: 1457  loss: 1.4186  top1_acc: 0.2727  top5_acc: 0.9091  loss_cls: 1.4186
2025/02/23 21:25:04 - mmengine - INFO - Saving checkpoint at 8 epochs
2025/02/23 21:25:08 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:08 - mmengine - INFO - Epoch(train)   [9][50/50]  lr: 4.0438e-02  eta: 0:05:25  time: 0.0681  data_time: 0.0042  memory: 1457  loss: 1.0854  top1_acc: 0.5455  top5_acc: 0.9091  loss_cls: 1.0854
2025/02/23 21:25:08 - mmengine - INFO - Saving checkpoint at 9 epochs
2025/02/23 21:25:12 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:12 - mmengine - INFO - Epoch(train)  [10][50/50]  lr: 3.1047e-02  eta: 0:05:22  time: 0.0679  data_time: 0.0040  memory: 1457  loss: 0.9481  top1_acc: 0.4545  top5_acc: 1.0000  loss_cls: 0.9481
2025/02/23 21:25:12 - mmengine - INFO - Saving checkpoint at 10 epochs
2025/02/23 21:25:12 - mmengine - INFO - Epoch(val) [10][2/2]    acc/top1: 0.3684  acc/top5: 0.7368  acc/mean1: 0.2879  data_time: 0.0129  time: 0.0438
2025/02/23 21:25:12 - mmengine - INFO - The previous best checkpoint /home/labuser/OnHit/OnHitCode/models/test2/best_acc_top1_epoch_5.pth is removed
2025/02/23 21:25:12 - mmengine - INFO - The best checkpoint with 0.3684 acc/top1 at 10 epoch is saved to best_acc_top1_epoch_10.pth.
2025/02/23 21:25:15 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:15 - mmengine - INFO - Epoch(train)  [11][50/50]  lr: 2.2385e-02  eta: 0:05:17  time: 0.0679  data_time: 0.0038  memory: 1457  loss: 0.9045  top1_acc: 0.7273  top5_acc: 1.0000  loss_cls: 0.9045
2025/02/23 21:25:15 - mmengine - INFO - Saving checkpoint at 11 epochs
2025/02/23 21:25:19 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:19 - mmengine - INFO - Epoch(train)  [12][50/50]  lr: 1.4784e-02  eta: 0:05:13  time: 0.0681  data_time: 0.0040  memory: 1457  loss: 0.5657  top1_acc: 0.7273  top5_acc: 1.0000  loss_cls: 0.5657
2025/02/23 21:25:19 - mmengine - INFO - Saving checkpoint at 12 epochs
2025/02/23 21:25:23 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:23 - mmengine - INFO - Epoch(train)  [13][50/50]  lr: 8.5359e-03  eta: 0:05:09  time: 0.0683  data_time: 0.0043  memory: 1457  loss: 0.5305  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.5305
2025/02/23 21:25:23 - mmengine - INFO - Saving checkpoint at 13 epochs
2025/02/23 21:25:26 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:26 - mmengine - INFO - Epoch(train)  [14][50/50]  lr: 3.8815e-03  eta: 0:05:05  time: 0.0690  data_time: 0.0044  memory: 1457  loss: 0.3885  top1_acc: 0.6364  top5_acc: 1.0000  loss_cls: 0.3885
2025/02/23 21:25:26 - mmengine - INFO - Saving checkpoint at 14 epochs
2025/02/23 21:25:30 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:30 - mmengine - INFO - Epoch(train)  [15][50/50]  lr: 9.9942e-04  eta: 0:05:02  time: 0.0681  data_time: 0.0039  memory: 1457  loss: 0.2678  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.2678
2025/02/23 21:25:30 - mmengine - INFO - Saving checkpoint at 15 epochs
2025/02/23 21:25:30 - mmengine - INFO - Epoch(val) [15][2/2]    acc/top1: 0.2105  acc/top5: 0.8947  acc/mean1: 0.1515  data_time: 0.0123  time: 0.0209
2025/02/23 21:25:34 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:34 - mmengine - INFO - Epoch(train)  [16][50/50]  lr: 3.8553e-07  eta: 0:04:58  time: 0.0693  data_time: 0.0050  memory: 1457  loss: 0.3479  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3479
2025/02/23 21:25:34 - mmengine - INFO - Saving checkpoint at 16 epochs
2025/02/23 21:25:37 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:37 - mmengine - INFO - Epoch(train)  [17][50/50]  lr: 9.2281e-04  eta: 0:04:54  time: 0.0684  data_time: 0.0041  memory: 1457  loss: 0.3168  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.3168
2025/02/23 21:25:37 - mmengine - INFO - Saving checkpoint at 17 epochs
2025/02/23 21:25:41 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:41 - mmengine - INFO - Epoch(train)  [18][50/50]  lr: 3.7312e-03  eta: 0:04:51  time: 0.0683  data_time: 0.0040  memory: 1457  loss: 0.3262  top1_acc: 0.5455  top5_acc: 1.0000  loss_cls: 0.3262
2025/02/23 21:25:41 - mmengine - INFO - Saving checkpoint at 18 epochs
2025/02/23 21:25:45 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:45 - mmengine - INFO - Epoch(train)  [19][50/50]  lr: 8.3178e-03  eta: 0:04:47  time: 0.0680  data_time: 0.0038  memory: 1457  loss: 0.3560  top1_acc: 0.8182  top5_acc: 1.0000  loss_cls: 0.3560
2025/02/23 21:25:45 - mmengine - INFO - Saving checkpoint at 19 epochs
2025/02/23 21:25:48 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:48 - mmengine - INFO - Epoch(train)  [20][50/50]  lr: 1.4506e-02  eta: 0:04:43  time: 0.0684  data_time: 0.0041  memory: 1457  loss: 0.5315  top1_acc: 0.8182  top5_acc: 0.9091  loss_cls: 0.5315
2025/02/23 21:25:48 - mmengine - INFO - Saving checkpoint at 20 epochs
2025/02/23 21:25:49 - mmengine - INFO - Epoch(val) [20][2/2]    acc/top1: 0.3158  acc/top5: 0.8947  acc/mean1: 0.2879  data_time: 0.0112  time: 0.0196
2025/02/23 21:25:52 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:52 - mmengine - INFO - Epoch(train)  [21][50/50]  lr: 2.2058e-02  eta: 0:04:40  time: 0.0683  data_time: 0.0039  memory: 1457  loss: 0.3521  top1_acc: 0.8182  top5_acc: 1.0000  loss_cls: 0.3521
2025/02/23 21:25:52 - mmengine - INFO - Saving checkpoint at 21 epochs
2025/02/23 21:25:56 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:56 - mmengine - INFO - Epoch(train)  [22][50/50]  lr: 3.0685e-02  eta: 0:04:36  time: 0.0684  data_time: 0.0040  memory: 1457  loss: 0.6128  top1_acc: 0.8182  top5_acc: 1.0000  loss_cls: 0.6128
2025/02/23 21:25:56 - mmengine - INFO - Saving checkpoint at 22 epochs
2025/02/23 21:25:59 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:25:59 - mmengine - INFO - Epoch(train)  [23][50/50]  lr: 4.0053e-02  eta: 0:04:33  time: 0.0685  data_time: 0.0042  memory: 1457  loss: 0.5447  top1_acc: 0.7273  top5_acc: 1.0000  loss_cls: 0.5447
2025/02/23 21:25:59 - mmengine - INFO - Saving checkpoint at 23 epochs
2025/02/23 21:26:03 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:03 - mmengine - INFO - Epoch(train)  [24][50/50]  lr: 4.9804e-02  eta: 0:04:29  time: 0.0680  data_time: 0.0037  memory: 1457  loss: 0.6244  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.6244
2025/02/23 21:26:03 - mmengine - INFO - Saving checkpoint at 24 epochs
2025/02/23 21:26:07 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:07 - mmengine - INFO - Epoch(train)  [25][50/50]  lr: 5.9562e-02  eta: 0:04:26  time: 0.0683  data_time: 0.0039  memory: 1457  loss: 0.6532  top1_acc: 0.7273  top5_acc: 1.0000  loss_cls: 0.6532
2025/02/23 21:26:07 - mmengine - INFO - Saving checkpoint at 25 epochs
2025/02/23 21:26:07 - mmengine - INFO - Epoch(val) [25][2/2]    acc/top1: 0.3158  acc/top5: 0.7368  acc/mean1: 0.2879  data_time: 0.0111  time: 0.0196
2025/02/23 21:26:10 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:10 - mmengine - INFO - Epoch(train)  [26][50/50]  lr: 6.8953e-02  eta: 0:04:22  time: 0.0682  data_time: 0.0038  memory: 1457  loss: 0.3946  top1_acc: 0.8182  top5_acc: 1.0000  loss_cls: 0.3946
2025/02/23 21:26:10 - mmengine - INFO - Saving checkpoint at 26 epochs
2025/02/23 21:26:14 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:14 - mmengine - INFO - Epoch(train)  [27][50/50]  lr: 7.7615e-02  eta: 0:04:18  time: 0.0683  data_time: 0.0040  memory: 1457  loss: 0.5173  top1_acc: 0.7273  top5_acc: 0.9091  loss_cls: 0.5173
2025/02/23 21:26:14 - mmengine - INFO - Saving checkpoint at 27 epochs
2025/02/23 21:26:18 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:18 - mmengine - INFO - Epoch(train)  [28][50/50]  lr: 8.5216e-02  eta: 0:04:15  time: 0.0686  data_time: 0.0042  memory: 1457  loss: 0.4217  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.4217
2025/02/23 21:26:18 - mmengine - INFO - Saving checkpoint at 28 epochs
2025/02/23 21:26:21 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:21 - mmengine - INFO - Epoch(train)  [29][50/50]  lr: 9.1464e-02  eta: 0:04:11  time: 0.0686  data_time: 0.0042  memory: 1457  loss: 0.5772  top1_acc: 0.7273  top5_acc: 1.0000  loss_cls: 0.5772
2025/02/23 21:26:21 - mmengine - INFO - Saving checkpoint at 29 epochs
2025/02/23 21:26:25 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:25 - mmengine - INFO - Epoch(train)  [30][50/50]  lr: 9.6118e-02  eta: 0:04:08  time: 0.0688  data_time: 0.0042  memory: 1457  loss: 0.2883  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2883
2025/02/23 21:26:25 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/02/23 21:26:25 - mmengine - INFO - Epoch(val) [30][2/2]    acc/top1: 0.5789  acc/top5: 0.8947  acc/mean1: 0.4091  data_time: 0.0111  time: 0.0197
2025/02/23 21:26:25 - mmengine - INFO - The previous best checkpoint /home/labuser/OnHit/OnHitCode/models/test2/best_acc_top1_epoch_10.pth is removed
2025/02/23 21:26:25 - mmengine - INFO - The best checkpoint with 0.5789 acc/top1 at 30 epoch is saved to best_acc_top1_epoch_30.pth.
2025/02/23 21:26:29 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:29 - mmengine - INFO - Epoch(train)  [31][50/50]  lr: 9.9001e-02  eta: 0:04:04  time: 0.0683  data_time: 0.0040  memory: 1457  loss: 0.2513  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.2513
2025/02/23 21:26:29 - mmengine - INFO - Saving checkpoint at 31 epochs
2025/02/23 21:26:33 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:33 - mmengine - INFO - Epoch(train)  [32][50/50]  lr: 1.0000e-01  eta: 0:04:00  time: 0.0681  data_time: 0.0038  memory: 1457  loss: 0.2853  top1_acc: 0.8182  top5_acc: 1.0000  loss_cls: 0.2853
2025/02/23 21:26:33 - mmengine - INFO - Saving checkpoint at 32 epochs
2025/02/23 21:26:36 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:36 - mmengine - INFO - Epoch(train)  [33][50/50]  lr: 9.9077e-02  eta: 0:03:57  time: 0.0686  data_time: 0.0043  memory: 1457  loss: 0.4292  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4292
2025/02/23 21:26:36 - mmengine - INFO - Saving checkpoint at 33 epochs
2025/02/23 21:26:40 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:40 - mmengine - INFO - Epoch(train)  [34][50/50]  lr: 9.6269e-02  eta: 0:03:53  time: 0.0681  data_time: 0.0038  memory: 1457  loss: 0.2585  top1_acc: 0.8182  top5_acc: 1.0000  loss_cls: 0.2585
2025/02/23 21:26:40 - mmengine - INFO - Saving checkpoint at 34 epochs
2025/02/23 21:26:44 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:44 - mmengine - INFO - Epoch(train)  [35][50/50]  lr: 9.1682e-02  eta: 0:03:50  time: 0.0683  data_time: 0.0040  memory: 1457  loss: 0.2875  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.2875
2025/02/23 21:26:44 - mmengine - INFO - Saving checkpoint at 35 epochs
2025/02/23 21:26:44 - mmengine - INFO - Epoch(val) [35][2/2]    acc/top1: 0.4737  acc/top5: 0.8947  acc/mean1: 0.3611  data_time: 0.0111  time: 0.0196
2025/02/23 21:26:47 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:47 - mmengine - INFO - Epoch(train)  [36][50/50]  lr: 8.5494e-02  eta: 0:03:46  time: 0.0683  data_time: 0.0039  memory: 1457  loss: 0.1956  top1_acc: 0.8182  top5_acc: 1.0000  loss_cls: 0.1956
2025/02/23 21:26:47 - mmengine - INFO - Saving checkpoint at 36 epochs
2025/02/23 21:26:51 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:51 - mmengine - INFO - Epoch(train)  [37][50/50]  lr: 7.7942e-02  eta: 0:03:43  time: 0.0682  data_time: 0.0039  memory: 1457  loss: 0.1845  top1_acc: 0.7273  top5_acc: 1.0000  loss_cls: 0.1845
2025/02/23 21:26:51 - mmengine - INFO - Saving checkpoint at 37 epochs
2025/02/23 21:26:55 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:55 - mmengine - INFO - Epoch(train)  [38][50/50]  lr: 6.9315e-02  eta: 0:03:39  time: 0.0685  data_time: 0.0040  memory: 1457  loss: 0.0879  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0879
2025/02/23 21:26:55 - mmengine - INFO - Saving checkpoint at 38 epochs
2025/02/23 21:26:58 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:26:58 - mmengine - INFO - Epoch(train)  [39][50/50]  lr: 5.9947e-02  eta: 0:03:35  time: 0.0686  data_time: 0.0039  memory: 1457  loss: 0.0195  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0195
2025/02/23 21:26:58 - mmengine - INFO - Saving checkpoint at 39 epochs
2025/02/23 21:27:02 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:02 - mmengine - INFO - Epoch(train)  [40][50/50]  lr: 5.0196e-02  eta: 0:03:32  time: 0.0690  data_time: 0.0042  memory: 1457  loss: 0.0261  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0261
2025/02/23 21:27:02 - mmengine - INFO - Saving checkpoint at 40 epochs
2025/02/23 21:27:02 - mmengine - INFO - Epoch(val) [40][2/2]    acc/top1: 0.5263  acc/top5: 0.9474  acc/mean1: 0.5000  data_time: 0.0113  time: 0.0200
2025/02/23 21:27:06 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:06 - mmengine - INFO - Epoch(train)  [41][50/50]  lr: 4.0438e-02  eta: 0:03:28  time: 0.0686  data_time: 0.0039  memory: 1457  loss: 0.0253  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0253
2025/02/23 21:27:06 - mmengine - INFO - Saving checkpoint at 41 epochs
2025/02/23 21:27:09 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:09 - mmengine - INFO - Epoch(train)  [42][50/50]  lr: 3.1047e-02  eta: 0:03:25  time: 0.0681  data_time: 0.0035  memory: 1457  loss: 0.0218  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0218
2025/02/23 21:27:09 - mmengine - INFO - Saving checkpoint at 42 epochs
2025/02/23 21:27:13 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:13 - mmengine - INFO - Epoch(train)  [43][50/50]  lr: 2.2385e-02  eta: 0:03:21  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0093  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0093
2025/02/23 21:27:13 - mmengine - INFO - Saving checkpoint at 43 epochs
2025/02/23 21:27:17 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:17 - mmengine - INFO - Epoch(train)  [44][50/50]  lr: 1.4784e-02  eta: 0:03:18  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0123  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0123
2025/02/23 21:27:17 - mmengine - INFO - Saving checkpoint at 44 epochs
2025/02/23 21:27:20 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:20 - mmengine - INFO - Epoch(train)  [45][50/50]  lr: 8.5359e-03  eta: 0:03:14  time: 0.0697  data_time: 0.0049  memory: 1457  loss: 0.0169  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0169
2025/02/23 21:27:20 - mmengine - INFO - Saving checkpoint at 45 epochs
2025/02/23 21:27:21 - mmengine - INFO - Epoch(val) [45][2/2]    acc/top1: 0.4737  acc/top5: 1.0000  acc/mean1: 0.3750  data_time: 0.0109  time: 0.0195
2025/02/23 21:27:24 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:24 - mmengine - INFO - Epoch(train)  [46][50/50]  lr: 3.8815e-03  eta: 0:03:11  time: 0.0685  data_time: 0.0038  memory: 1457  loss: 0.0045  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0045
2025/02/23 21:27:24 - mmengine - INFO - Saving checkpoint at 46 epochs
2025/02/23 21:27:28 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:28 - mmengine - INFO - Epoch(train)  [47][50/50]  lr: 9.9942e-04  eta: 0:03:07  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0101  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0101
2025/02/23 21:27:28 - mmengine - INFO - Saving checkpoint at 47 epochs
2025/02/23 21:27:31 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:31 - mmengine - INFO - Epoch(train)  [48][50/50]  lr: 3.8553e-07  eta: 0:03:04  time: 0.0688  data_time: 0.0041  memory: 1457  loss: 0.0087  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0087
2025/02/23 21:27:31 - mmengine - INFO - Saving checkpoint at 48 epochs
2025/02/23 21:27:35 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:35 - mmengine - INFO - Epoch(train)  [49][50/50]  lr: 9.2281e-04  eta: 0:03:00  time: 0.0687  data_time: 0.0041  memory: 1457  loss: 0.0084  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0084
2025/02/23 21:27:35 - mmengine - INFO - Saving checkpoint at 49 epochs
2025/02/23 21:27:39 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:39 - mmengine - INFO - Epoch(train)  [50][50/50]  lr: 3.7312e-03  eta: 0:02:57  time: 0.0685  data_time: 0.0038  memory: 1457  loss: 0.0114  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0114
2025/02/23 21:27:39 - mmengine - INFO - Saving checkpoint at 50 epochs
2025/02/23 21:27:39 - mmengine - INFO - Epoch(val) [50][2/2]    acc/top1: 0.4737  acc/top5: 1.0000  acc/mean1: 0.3750  data_time: 0.0111  time: 0.0198
2025/02/23 21:27:43 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:43 - mmengine - INFO - Epoch(train)  [51][50/50]  lr: 8.3178e-03  eta: 0:02:53  time: 0.0684  data_time: 0.0038  memory: 1457  loss: 0.0094  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0094
2025/02/23 21:27:43 - mmengine - INFO - Saving checkpoint at 51 epochs
2025/02/23 21:27:46 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:46 - mmengine - INFO - Epoch(train)  [52][50/50]  lr: 1.4506e-02  eta: 0:02:49  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0097  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0097
2025/02/23 21:27:46 - mmengine - INFO - Saving checkpoint at 52 epochs
2025/02/23 21:27:50 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:50 - mmengine - INFO - Epoch(train)  [53][50/50]  lr: 2.2058e-02  eta: 0:02:46  time: 0.0703  data_time: 0.0042  memory: 1457  loss: 0.0051  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0051
2025/02/23 21:27:50 - mmengine - INFO - Saving checkpoint at 53 epochs
2025/02/23 21:27:54 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:54 - mmengine - INFO - Epoch(train)  [54][50/50]  lr: 3.0685e-02  eta: 0:02:43  time: 0.0693  data_time: 0.0044  memory: 1457  loss: 0.0102  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0102
2025/02/23 21:27:54 - mmengine - INFO - Saving checkpoint at 54 epochs
2025/02/23 21:27:57 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:27:57 - mmengine - INFO - Epoch(train)  [55][50/50]  lr: 4.0053e-02  eta: 0:02:39  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0242  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0242
2025/02/23 21:27:57 - mmengine - INFO - Saving checkpoint at 55 epochs
2025/02/23 21:27:58 - mmengine - INFO - Epoch(val) [55][2/2]    acc/top1: 0.5263  acc/top5: 1.0000  acc/mean1: 0.3750  data_time: 0.0111  time: 0.0197
2025/02/23 21:28:01 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:01 - mmengine - INFO - Epoch(train)  [56][50/50]  lr: 4.9804e-02  eta: 0:02:35  time: 0.0688  data_time: 0.0040  memory: 1457  loss: 0.0124  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0124
2025/02/23 21:28:01 - mmengine - INFO - Saving checkpoint at 56 epochs
2025/02/23 21:28:05 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:05 - mmengine - INFO - Epoch(train)  [57][50/50]  lr: 5.9562e-02  eta: 0:02:32  time: 0.0685  data_time: 0.0039  memory: 1457  loss: 0.0194  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0194
2025/02/23 21:28:05 - mmengine - INFO - Saving checkpoint at 57 epochs
2025/02/23 21:28:09 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:09 - mmengine - INFO - Epoch(train)  [58][50/50]  lr: 6.8953e-02  eta: 0:02:28  time: 0.0688  data_time: 0.0043  memory: 1457  loss: 0.0126  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0126
2025/02/23 21:28:09 - mmengine - INFO - Saving checkpoint at 58 epochs
2025/02/23 21:28:12 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:12 - mmengine - INFO - Epoch(train)  [59][50/50]  lr: 7.7615e-02  eta: 0:02:25  time: 0.0688  data_time: 0.0041  memory: 1457  loss: 0.0089  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0089
2025/02/23 21:28:12 - mmengine - INFO - Saving checkpoint at 59 epochs
2025/02/23 21:28:16 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:16 - mmengine - INFO - Epoch(train)  [60][50/50]  lr: 8.5216e-02  eta: 0:02:21  time: 0.0685  data_time: 0.0039  memory: 1457  loss: 0.0111  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0111
2025/02/23 21:28:16 - mmengine - INFO - Saving checkpoint at 60 epochs
2025/02/23 21:28:16 - mmengine - INFO - Epoch(val) [60][2/2]    acc/top1: 0.5263  acc/top5: 0.9474  acc/mean1: 0.4167  data_time: 0.0117  time: 0.0204
2025/02/23 21:28:20 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:20 - mmengine - INFO - Epoch(train)  [61][50/50]  lr: 9.1464e-02  eta: 0:02:18  time: 0.0686  data_time: 0.0039  memory: 1457  loss: 0.0030  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0030
2025/02/23 21:28:20 - mmengine - INFO - Saving checkpoint at 61 epochs
2025/02/23 21:28:23 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:23 - mmengine - INFO - Epoch(train)  [62][50/50]  lr: 9.6118e-02  eta: 0:02:14  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0127  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0127
2025/02/23 21:28:23 - mmengine - INFO - Saving checkpoint at 62 epochs
2025/02/23 21:28:27 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:27 - mmengine - INFO - Epoch(train)  [63][50/50]  lr: 9.9001e-02  eta: 0:02:11  time: 0.0684  data_time: 0.0038  memory: 1457  loss: 0.1348  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1348
2025/02/23 21:28:27 - mmengine - INFO - Saving checkpoint at 63 epochs
2025/02/23 21:28:31 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:31 - mmengine - INFO - Epoch(train)  [64][50/50]  lr: 1.0000e-01  eta: 0:02:07  time: 0.0686  data_time: 0.0040  memory: 1457  loss: 0.4531  top1_acc: 0.7273  top5_acc: 0.9091  loss_cls: 0.4531
2025/02/23 21:28:31 - mmengine - INFO - Saving checkpoint at 64 epochs
2025/02/23 21:28:34 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:34 - mmengine - INFO - Epoch(train)  [65][50/50]  lr: 9.9077e-02  eta: 0:02:04  time: 0.0685  data_time: 0.0039  memory: 1457  loss: 0.1203  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1203
2025/02/23 21:28:34 - mmengine - INFO - Saving checkpoint at 65 epochs
2025/02/23 21:28:34 - mmengine - INFO - Epoch(val) [65][2/2]    acc/top1: 0.5789  acc/top5: 0.8421  acc/mean1: 0.4615  data_time: 0.0111  time: 0.0198
2025/02/23 21:28:38 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:38 - mmengine - INFO - Epoch(train)  [66][50/50]  lr: 9.6269e-02  eta: 0:02:00  time: 0.0686  data_time: 0.0038  memory: 1457  loss: 0.1595  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1595
2025/02/23 21:28:38 - mmengine - INFO - Saving checkpoint at 66 epochs
2025/02/23 21:28:42 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:42 - mmengine - INFO - Epoch(train)  [67][50/50]  lr: 9.1682e-02  eta: 0:01:57  time: 0.0689  data_time: 0.0041  memory: 1457  loss: 0.1442  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.1442
2025/02/23 21:28:42 - mmengine - INFO - Saving checkpoint at 67 epochs
2025/02/23 21:28:45 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:45 - mmengine - INFO - Epoch(train)  [68][50/50]  lr: 8.5494e-02  eta: 0:01:53  time: 0.0703  data_time: 0.0041  memory: 1457  loss: 0.1888  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1888
2025/02/23 21:28:45 - mmengine - INFO - Saving checkpoint at 68 epochs
2025/02/23 21:28:49 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:49 - mmengine - INFO - Epoch(train)  [69][50/50]  lr: 7.7942e-02  eta: 0:01:49  time: 0.0687  data_time: 0.0041  memory: 1457  loss: 0.0898  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0898
2025/02/23 21:28:49 - mmengine - INFO - Saving checkpoint at 69 epochs
2025/02/23 21:28:53 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:53 - mmengine - INFO - Epoch(train)  [70][50/50]  lr: 6.9315e-02  eta: 0:01:46  time: 0.0688  data_time: 0.0042  memory: 1457  loss: 0.0481  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.0481
2025/02/23 21:28:53 - mmengine - INFO - Saving checkpoint at 70 epochs
2025/02/23 21:28:53 - mmengine - INFO - Epoch(val) [70][2/2]    acc/top1: 0.6316  acc/top5: 1.0000  acc/mean1: 0.5278  data_time: 0.0112  time: 0.0197
2025/02/23 21:28:53 - mmengine - INFO - The previous best checkpoint /home/labuser/OnHit/OnHitCode/models/test2/best_acc_top1_epoch_30.pth is removed
2025/02/23 21:28:53 - mmengine - INFO - The best checkpoint with 0.6316 acc/top1 at 70 epoch is saved to best_acc_top1_epoch_70.pth.
2025/02/23 21:28:57 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:28:57 - mmengine - INFO - Epoch(train)  [71][50/50]  lr: 5.9947e-02  eta: 0:01:42  time: 0.0691  data_time: 0.0044  memory: 1457  loss: 0.0178  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0178
2025/02/23 21:28:57 - mmengine - INFO - Saving checkpoint at 71 epochs
2025/02/23 21:29:00 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:00 - mmengine - INFO - Epoch(train)  [72][50/50]  lr: 5.0196e-02  eta: 0:01:39  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0507  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0507
2025/02/23 21:29:00 - mmengine - INFO - Saving checkpoint at 72 epochs
2025/02/23 21:29:04 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:04 - mmengine - INFO - Epoch(train)  [73][50/50]  lr: 4.0438e-02  eta: 0:01:35  time: 0.0688  data_time: 0.0040  memory: 1457  loss: 0.0124  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0124
2025/02/23 21:29:04 - mmengine - INFO - Saving checkpoint at 73 epochs
2025/02/23 21:29:08 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:08 - mmengine - INFO - Epoch(train)  [74][50/50]  lr: 3.1047e-02  eta: 0:01:32  time: 0.0687  data_time: 0.0039  memory: 1457  loss: 0.0213  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.0213
2025/02/23 21:29:08 - mmengine - INFO - Saving checkpoint at 74 epochs
2025/02/23 21:29:11 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:11 - mmengine - INFO - Epoch(train)  [75][50/50]  lr: 2.2385e-02  eta: 0:01:28  time: 0.0688  data_time: 0.0040  memory: 1457  loss: 0.0090  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0090
2025/02/23 21:29:11 - mmengine - INFO - Saving checkpoint at 75 epochs
2025/02/23 21:29:12 - mmengine - INFO - Epoch(val) [75][2/2]    acc/top1: 0.6316  acc/top5: 1.0000  acc/mean1: 0.5278  data_time: 0.0125  time: 0.0221
2025/02/23 21:29:15 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:15 - mmengine - INFO - Epoch(train)  [76][50/50]  lr: 1.4784e-02  eta: 0:01:25  time: 0.0695  data_time: 0.0047  memory: 1457  loss: 0.0077  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0077
2025/02/23 21:29:15 - mmengine - INFO - Saving checkpoint at 76 epochs
2025/02/23 21:29:19 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:19 - mmengine - INFO - Epoch(train)  [77][50/50]  lr: 8.5359e-03  eta: 0:01:21  time: 0.0683  data_time: 0.0038  memory: 1457  loss: 0.0049  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0049
2025/02/23 21:29:19 - mmengine - INFO - Saving checkpoint at 77 epochs
2025/02/23 21:29:22 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:22 - mmengine - INFO - Epoch(train)  [78][50/50]  lr: 3.8815e-03  eta: 0:01:18  time: 0.0689  data_time: 0.0042  memory: 1457  loss: 0.0061  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0061
2025/02/23 21:29:22 - mmengine - INFO - Saving checkpoint at 78 epochs
2025/02/23 21:29:26 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:26 - mmengine - INFO - Epoch(train)  [79][50/50]  lr: 9.9942e-04  eta: 0:01:14  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0050  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0050
2025/02/23 21:29:26 - mmengine - INFO - Saving checkpoint at 79 epochs
2025/02/23 21:29:30 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:30 - mmengine - INFO - Epoch(train)  [80][50/50]  lr: 3.8553e-07  eta: 0:01:10  time: 0.0684  data_time: 0.0038  memory: 1457  loss: 0.0026  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0026
2025/02/23 21:29:30 - mmengine - INFO - Saving checkpoint at 80 epochs
2025/02/23 21:29:30 - mmengine - INFO - Epoch(val) [80][2/2]    acc/top1: 0.5789  acc/top5: 1.0000  acc/mean1: 0.5000  data_time: 0.0114  time: 0.0198
2025/02/23 21:29:34 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:34 - mmengine - INFO - Epoch(train)  [81][50/50]  lr: 9.2281e-04  eta: 0:01:07  time: 0.0685  data_time: 0.0038  memory: 1457  loss: 0.0062  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0062
2025/02/23 21:29:34 - mmengine - INFO - Saving checkpoint at 81 epochs
2025/02/23 21:29:37 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:37 - mmengine - INFO - Epoch(train)  [82][50/50]  lr: 3.7312e-03  eta: 0:01:03  time: 0.0686  data_time: 0.0040  memory: 1457  loss: 0.0178  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0178
2025/02/23 21:29:37 - mmengine - INFO - Saving checkpoint at 82 epochs
2025/02/23 21:29:41 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:41 - mmengine - INFO - Epoch(train)  [83][50/50]  lr: 8.3178e-03  eta: 0:01:00  time: 0.0685  data_time: 0.0038  memory: 1457  loss: 0.0039  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0039
2025/02/23 21:29:41 - mmengine - INFO - Saving checkpoint at 83 epochs
2025/02/23 21:29:45 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:45 - mmengine - INFO - Epoch(train)  [84][50/50]  lr: 1.4506e-02  eta: 0:00:56  time: 0.0688  data_time: 0.0042  memory: 1457  loss: 0.0059  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0059
2025/02/23 21:29:45 - mmengine - INFO - Saving checkpoint at 84 epochs
2025/02/23 21:29:48 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:48 - mmengine - INFO - Epoch(train)  [85][50/50]  lr: 2.2058e-02  eta: 0:00:53  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0132  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.0132
2025/02/23 21:29:48 - mmengine - INFO - Saving checkpoint at 85 epochs
2025/02/23 21:29:48 - mmengine - INFO - Epoch(val) [85][2/2]    acc/top1: 0.5789  acc/top5: 0.9474  acc/mean1: 0.5000  data_time: 0.0111  time: 0.0196
2025/02/23 21:29:52 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:52 - mmengine - INFO - Epoch(train)  [86][50/50]  lr: 3.0685e-02  eta: 0:00:49  time: 0.0689  data_time: 0.0042  memory: 1457  loss: 0.0062  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0062
2025/02/23 21:29:52 - mmengine - INFO - Saving checkpoint at 86 epochs
2025/02/23 21:29:56 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:56 - mmengine - INFO - Epoch(train)  [87][50/50]  lr: 4.0053e-02  eta: 0:00:46  time: 0.0686  data_time: 0.0038  memory: 1457  loss: 0.0133  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0133
2025/02/23 21:29:56 - mmengine - INFO - Saving checkpoint at 87 epochs
2025/02/23 21:29:59 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:29:59 - mmengine - INFO - Epoch(train)  [88][50/50]  lr: 4.9804e-02  eta: 0:00:42  time: 0.0684  data_time: 0.0038  memory: 1457  loss: 0.0064  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0064
2025/02/23 21:29:59 - mmengine - INFO - Saving checkpoint at 88 epochs
2025/02/23 21:30:03 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:03 - mmengine - INFO - Epoch(train)  [89][50/50]  lr: 5.9562e-02  eta: 0:00:39  time: 0.0688  data_time: 0.0042  memory: 1457  loss: 0.0123  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0123
2025/02/23 21:30:03 - mmengine - INFO - Saving checkpoint at 89 epochs
2025/02/23 21:30:07 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:07 - mmengine - INFO - Epoch(train)  [90][50/50]  lr: 6.8953e-02  eta: 0:00:35  time: 0.0687  data_time: 0.0038  memory: 1457  loss: 0.0179  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0179
2025/02/23 21:30:07 - mmengine - INFO - Saving checkpoint at 90 epochs
2025/02/23 21:30:07 - mmengine - INFO - Epoch(val) [90][2/2]    acc/top1: 0.5789  acc/top5: 0.8947  acc/mean1: 0.4848  data_time: 0.0117  time: 0.0203
2025/02/23 21:30:10 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:10 - mmengine - INFO - Epoch(train)  [91][50/50]  lr: 7.7615e-02  eta: 0:00:31  time: 0.0686  data_time: 0.0040  memory: 1457  loss: 0.0224  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0224
2025/02/23 21:30:10 - mmengine - INFO - Saving checkpoint at 91 epochs
2025/02/23 21:30:14 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:14 - mmengine - INFO - Epoch(train)  [92][50/50]  lr: 8.5216e-02  eta: 0:00:28  time: 0.0684  data_time: 0.0037  memory: 1457  loss: 0.0126  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0126
2025/02/23 21:30:14 - mmengine - INFO - Saving checkpoint at 92 epochs
2025/02/23 21:30:18 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:18 - mmengine - INFO - Epoch(train)  [93][50/50]  lr: 9.1464e-02  eta: 0:00:24  time: 0.0691  data_time: 0.0045  memory: 1457  loss: 0.0079  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0079
2025/02/23 21:30:18 - mmengine - INFO - Saving checkpoint at 93 epochs
2025/02/23 21:30:21 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:21 - mmengine - INFO - Epoch(train)  [94][50/50]  lr: 9.6118e-02  eta: 0:00:21  time: 0.0687  data_time: 0.0040  memory: 1457  loss: 0.0091  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0091
2025/02/23 21:30:21 - mmengine - INFO - Saving checkpoint at 94 epochs
2025/02/23 21:30:25 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:25 - mmengine - INFO - Epoch(train)  [95][50/50]  lr: 9.9001e-02  eta: 0:00:17  time: 0.0683  data_time: 0.0037  memory: 1457  loss: 0.0067  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0067
2025/02/23 21:30:25 - mmengine - INFO - Saving checkpoint at 95 epochs
2025/02/23 21:30:25 - mmengine - INFO - Epoch(val) [95][2/2]    acc/top1: 0.5263  acc/top5: 1.0000  acc/mean1: 0.4167  data_time: 0.0110  time: 0.0196
2025/02/23 21:30:29 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:29 - mmengine - INFO - Epoch(train)  [96][50/50]  lr: 1.0000e-01  eta: 0:00:14  time: 0.0694  data_time: 0.0045  memory: 1457  loss: 0.0118  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0118
2025/02/23 21:30:29 - mmengine - INFO - Saving checkpoint at 96 epochs
2025/02/23 21:30:33 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:33 - mmengine - INFO - Epoch(train)  [97][50/50]  lr: 9.9077e-02  eta: 0:00:10  time: 0.0687  data_time: 0.0042  memory: 1457  loss: 0.1394  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1394
2025/02/23 21:30:33 - mmengine - INFO - Saving checkpoint at 97 epochs
2025/02/23 21:30:36 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:36 - mmengine - INFO - Epoch(train)  [98][50/50]  lr: 9.6269e-02  eta: 0:00:07  time: 0.0684  data_time: 0.0038  memory: 1457  loss: 0.3350  top1_acc: 0.8182  top5_acc: 1.0000  loss_cls: 0.3350
2025/02/23 21:30:36 - mmengine - INFO - Saving checkpoint at 98 epochs
2025/02/23 21:30:40 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:40 - mmengine - INFO - Epoch(train)  [99][50/50]  lr: 9.1682e-02  eta: 0:00:03  time: 0.0684  data_time: 0.0037  memory: 1457  loss: 0.3078  top1_acc: 0.9091  top5_acc: 1.0000  loss_cls: 0.3078
2025/02/23 21:30:40 - mmengine - INFO - Saving checkpoint at 99 epochs
2025/02/23 21:30:44 - mmengine - INFO - Exp name: stgcnpp_8xb16-bone-u100-80e_ntu60-xsub-keypoint-3d_20250223_212433
2025/02/23 21:30:44 - mmengine - INFO - Epoch(train) [100][50/50]  lr: 8.5494e-02  eta: 0:00:00  time: 0.0684  data_time: 0.0038  memory: 1457  loss: 0.1445  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1445
2025/02/23 21:30:44 - mmengine - INFO - Saving checkpoint at 100 epochs
2025/02/23 21:30:44 - mmengine - INFO - Epoch(val) [100][2/2]    acc/top1: 0.6316  acc/top5: 0.8421  acc/mean1: 0.4872  data_time: 0.0130  time: 0.0215
